apiVersion: v1                            # The API version (v1 currently)
kind: Pod                                 # The Kind of API resource
metadata:                                 # Describes the Pod and its labels
  name: nginx                             # Name of this Pod. A Pod's name must be unique within the namespace
  labels:                                 # Optional. Labels are arbitrary key:value pairs. Primary use is to group and target sets of pods.
    tier: frontend                        # Tag your pods with identifying attributes that are meaningful and relevant to your users
    app: nginx
  annotations:                            # Annotations, like labels, are key/value maps. They are used by automation tooling, client libs & NOC
    pod-url: http://mysite.com/nginx-pod  # URL containing detailed info about this Pod
    supported-by: 1-888-222-1800          # Phone or pager number to reach those responsible for supporting this Pod
spec:                                     # Specification of Pod's contents e.g. A list of containers it will run
  containers:                             # Start the container listing this way
    - name: nginx                         # A nickname for the container in this Pod. Must be unique with this Pod
      image: nginx:1.7.9                  # Name of the Docker image that Kubernetes will pull from a registry (default is Docker Hub)
      ports:
        - containerPort: 80               # The port used by the container. This port is accessible from all cluster nodes. 
                                          # Note: In Kubernetes, you don't publish container ports like you do in Docker. 
      livenessProbe:                      # Checks if the nginx application is running properly. If not Kubelet will kill and restart it
        httpGet:                          # Kubelet will perform a HTTP GET to the specified path and port. Success codes are 200-399 (inclusive)
          path: /
          port: 80
        initialDelaySeconds: 5            # Tells the kubelet that it should wait 5 sec before performing the first probe
        timeoutSeconds: 1                 # probe should receive a response within 1 sec
        periodSeconds: 5                  # perform a liveness probe every 5 sec
        failureThreshold: 3               # If more than 3 probes fail, Kubelet will kill and restart the container
      resources:                          # You can specify how much CPU and memory (RAM) each container needs
        requests:                         # Requests specify the *minimum* amount of CPU and RAM and k8s will *guarantee* this to the container
          cpu: "500m"                     # CPU resources are measured in cpu units. One cpu, in k8s, equals 1 vCPU in AWS (0.5 vCPU == 500m)
          memory: "64Mi"                  # Memory resources are measured in Bytes. 64Mi == 64 MB == 2 ** 26 Bytes
        limits:                           # Set a Max limit on CPU and Memory that the container cannot exceed
          cpu: "1"                        # k8s will configure the Linux kernel to ensure that this limit cannot be exceeded by the container
          memory: "512Mi"                 # Pod's Quality of Service Class is Burstable